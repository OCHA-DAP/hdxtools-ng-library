import { HxlFilter } from './ingredients';

import { Ingredient } from './ingredient';
export abstract class Bite {

  // error encountered while processing the bite
  public errorMsg: string;
  // internal flag to know if bite has been processed by recipe
  public init = false;
  // ingredient generated by cookbook generator, needed by recipe service
  public ingredient: Ingredient;
  // HXL Proxy generated: column name
  public title: string;
  public readonly initialTitle: string;
  // HXL Proxy generated: hxl tag
  public dataTitle: string;

  // internal to know what type of bite we have inside the template :)
  public type: string;

  public hashCode: number;

  // Timeseries or Charts or Key Figures
  public displayCategory: string;

  public description: string;

  // Deprecated using filters instead
  public filteredValues: number[];

  public filters: BiteFilters;

  static type(): string {
    return 'bite';
  }

  constructor(filters: BiteFilters, title?: string) {
    if (title) {
      this.setTitle(title);
    }
    this.initialTitle = this.title;
    this.type = (this.constructor as typeof Bite).type();

    this.filters = filters;

    this.filteredValues = [];
    this.errorMsg = null;
  }

  public setTitle(title: string) {
    // this.title = title.slice(0, 35) + (title.length > 35 ? '...' : '');
    this.title = title;
  }

}

export class BiteFilters {
  constructor(public filterWith: HxlFilter[], public filterWithout: HxlFilter[]) {}

}
